{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","i","components_Card","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_Searchbox","components_Scroll","components_CardList","_this2","fetch","then","response","json","users","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.338daa9a.chunk.js","sourcesContent":["import React from 'react';\n\n\n//props OBJ way\n// const Card = (props) =>{\n\n//destructering way\nconst Card = ({name, email, id}) =>{\n\n\treturn (\n\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?150x150`} />\n\t\t\t<div>\n\t\t\t\t<p>{name}</p>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot, i) => {\n\t\t\t\t\treturn( \n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey= {robot.id}\n\t\t\t\t\t\tname={robot.name} \n\t\t\t\t\t\temail={robot.email} \n\t\t\t\t\t\tid={robot.id}\n\t\t\t\t\t/>);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Searchbox = ({searchChange}) =>{\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange= {searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Searchbox;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style={{'overflowY': 'scroll', 'border':'3px solid black', 'height': '550px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state= {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tonSearchChange = (event) =>{\n\t\tthis.setState({searchField: event.target.value});\t\t\n\t}\n\n\trender(){\n\t\tconst {robots, searchField}= this.state;\n\n\t\tconst filteredRobots= robots.filter( robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\tif(!robots.length)\n\t\t{\n\t\t\treturn <h1>LOADING</h1>\n\t\t}else{\n\t\t\treturn (\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\t<h1 className=\"f1\"> RoboFriends</h1>\n\t\t\t\t\t\t<Searchbox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots: users}));\n\t}\n\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}